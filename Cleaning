Using the Spotify API

Access the spotify API: 

INSTALL SPOTIPY (THE LIBRARY THAT ALLOWS US TO USE THE API)

pip install spotipy --upgrade

import pandas as pd
import spotipy
sp = spotipy.Spotify()
from spotipy.oauth2 import SpotifyClientCredentials
import spotipy.util as util 

GET MY SECRET ENVIRONMENT CODES

import os
os.environ['SPOTIPY_CLIENT_ID'] = 'bf56488a43a94f21804b8ee461c1f98b'

import os
os.environ['SPOTIPY_CLIENT_SECRET'] = '424db6a145704a66ad4fa22c25ab098f'

access_token = "BQD8sBNDqPUfXM4WMo8y5rXBdhSxli6banfxdNHRpbzgz5c5iClbkked1iFtyQFUFKvWd7qRavmn7JDIQcw"

GET AUDIO FEATURES FROM 1 TRACK

import spotipy
import spotipy.oauth2

credentials = spotipy.oauth2.SpotifyClientCredentials()
spotify = spotipy.Spotify(client_credentials_manager=credentials)
print(spotify.audio_features(['6VzcQuzTNTMFnJ6rBSaLH9']))

GET AUDIO FEATURES FROM MULTIPLE TRACKS

import spotipy
import spotipy.util as util
from spotipy import oauth2

credentials = spotipy.oauth2.SpotifyClientCredentials()
spotify = spotipy.Spotify(client_credentials_manager=credentials)

sp.audio_features(tracks=["1ZMiCix7XSAbfAJlEZWMCp", "5JiH89mHrv9oWHlD0T326z"])


GET AUDIO FEATURES OF PLAYLIST INTO A DATASET (some of the code was taken from https://medium.com/better-programming/how-to-extract-any-artists-data-using-spotify-s-api-python-and-spotipy-4c079401bc37)


def getTrackIDs(user, playlist_id):
    ids = []
    playlist = sp.user_playlist(user, playlist_id)
    for item in playlist['tracks']['items']:
        track = item['track']
        ids.append(track['id'])
    return ids


ids = getTrackIDs('Carmen van Poelgeest', '6VbFCsgVzOKvBVudNhUttQ')




def Playlist_Tracks_Features(id):
  meta = sp.track(id)
  features = sp.audio_features(id)

  # Get basic song features
  name = meta['name']
  album = meta['album']['name']
  artist = meta['album']['artists'][0]['name']
  release_date = meta['album']['release_date']
  length = meta['duration_ms']
  popularity = meta['popularity']

  # Get audio features
  acousticness = features[0]['acousticness']
  danceability = features[0]['danceability']
  energy = features[0]['energy']
  instrumentalness = features[0]['instrumentalness']
  liveness = features[0]['liveness']
  loudness = features[0]['loudness']
  speechiness = features[0]['speechiness']
  tempo = features[0]['tempo']
  time_signature = features[0]['time_signature']

  track = [name, album, artist, release_date, length, popularity, danceability, acousticness, danceability, energy, instrumentalness, liveness, loudness, speechiness, tempo, time_signature]
  return track 

# Get all tracks of playlist
tracks = []
for i in range(len(ids)):
  track = Playlist_Tracks_Features(ids[i])
  tracks.append(track)

# create dataset
df = pd.DataFrame(tracks, columns = ['Name', 'Album', 'Artist', 'Release_date', 'Length', 'Popularity', 'Danceability', 'Acousticness', 'Danceability', 'Energy', 'Instrumentalness', 'Liveness', 'Loudness', 'Speechiness', 'Tempo', 'Time_signature'])

df.tail()




Cleaning the data for a weekly billboard: 

import pandas as pd
billboard = pd.read_csv("Hot100.csv")
billboard.head()

billboard2 = billboard.rename(columns={"date" : "year", "position" : "Position", "song" : "Song", "artist" : "Artist"}) 
billboard3 = billboard2.rename(columns={"Artist": "artists", "Song": "name"})
billboard3.head()

finalbillboard = billboard3[billboard2["Position"] <= 10]
finalbillboard
spotify = pd.read_csv("data_spotify.csv")
spotify.head()

spotify2 = spotify.set_index("name")
spotify2.head()

merged_df = spotify2.merge(finalbillboard, how = 'inner', on = ['artists', 'name'])
merged_df

newdatata = merged_df.sort_values("year_y")

Cleaning the data for a yearly billboard:
import pandas as pd
billboard = pd.read_csv("lol.csv")
billboard.head()

billboard2 = billboard.rename(columns={"song": "name"})
billboard2
spotify = pd.read_csv("data_spotify.csv")
spotify.head()
spotify3 = spotify.rename(columns={"year": "Year"})

spotify2 = spotify3.set_index("name")
spotify2.head()
merged_df = spotify2.merge(billboard2, how = 'inner', on = ['artists', 'name', 'Year'])
merged_df
